# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Create test CI/CD pipeline for SageMaker MLOps project

Parameters:
  ProjectName:
    Description: Project name
    Type: String
    Default: 'sagemaker-secure-mlops'
  
  TestVPCRegion:
    Description: Region for existing VPC and pre-provisioned IAM use case test
    Type: String
    Default: 'us-east-2'

  TestQuickStartRegion:
    Description: Region for Quickstart deployment use case test
    Type: String
    Default: 'eu-central-1'

  TestCFNRegion:
    Description: Region for 2-step CloudFormation deployment use case test
    Type: String
    Default: 'eu-west-1'

  TestSCRegion:
    Description: Region for 2-step CloudFormation and Service Catalog deployment use case test
    Type: String
    Default: 'eu-west-2'

  CfnArtifactS3BucketNamePrefix:
    Description: S3 bucket name prefix for artifact bucket
    Type: String
    Default: 'ilyiny-cfn-artefacts'

  CodeCommitRepositoryArn:
    Description: ARN of CodeCommit repository with source code
    Type: String

  NotificationArn:
    Description: SNS ARN for pipeline events and manual approval events
    Type: String

  CodePipelineDeployRoleForDSEnvironmentArn:
    Description: ARN for CodePipeline deploy role
    Type: String

Resources:

  AutomationLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: InlinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: IAMPermission
                Effect: Allow
                Action:
                  - 'iam:GetRole'
                Resource: '*'
              - Sid: ServiceCatalogPermission
                Effect: Allow
                Action:
                  - servicecatalog:*
                Resource: '*'
              - Sid: S3ArtifactBucketPermission
                Effect: Allow
                Action:
                  - 's3:*Object'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${CodePipelineArtifactsBucket}*'
                  - !Sub 'arn:aws:s3:::${CodePipelineArtifactsBucket}*/*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonVPCFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'

  CleanUpEFSLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-automation-CleanUpEFS'
      Code:
        ZipFile: |
          import json
          import boto3

          efs = boto3.client("efs")

          def lambda_handler(event, context):

              if not event:
                  return
                  
              print(event)
              sm_domain_id = event.get("SageMakerDomainId")

              print(f"Get EFS file system id(s) for SageMaker domain id {sm_domain_id}")
              fs_id = [
                  fs["FileSystemId"] for fs in efs.describe_file_systems()["FileSystems"] 
                      if [t["Value"] for t in fs["Tags"] if t["Key"]=="ManagedByAmazonSageMakerResource"][0].split("/")[-1] == sm_domain_id
                  ]

              print(f"EFS file system id(s): {fs_id}")

              for id in fs_id:
                  print(f"Delete mount targets for EFS file system id: {id}")
                  for mt in efs.describe_mount_targets(FileSystemId=id)["MountTargets"]:
                      efs.delete_mount_target(MountTargetId=mt["MountTargetId"])
                  
                  while len(efs.describe_mount_targets(FileSystemId=id)["MountTargets"]) > 0:
                      print("Wait until mount targes have been deleted")

                  print(f"Delete EFS file system {id}")
                  efs.delete_file_system(FileSystemId=id)
      Description: Delete SageMaker Studio left-over EFS file systems
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt AutomationLambdaExecutionRole.Arn 
      Runtime: python3.8
      Timeout: 300

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/service-role/'
      Policies:
        - PolicyName: CodePipelineServiceRoleInLinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - 'iam:PassRole'
                Resource: '*'
                Effect: 'Allow'
                Condition:
                  StringEqualsIfExists: 
                    'iam:PassedToService':
                      - 'cloudformation.amazonaws.com'
                      - 'elasticbeanstalk.amazonaws.com'
                      - 'ec2.amazonaws.com'
                      - 'ecs-tasks.amazonaws.com'
              -
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetRepository'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplication'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'codestar-connections:UseConnection'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                  - 'ecr:*'
                  - 'servicecatalog:*'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'opsworks:CreateDeployment'
                  - 'opsworks:DescribeApps'
                  - 'opsworks:DescribeCommands'
                  - 'opsworks:DescribeDeployments'
                  - 'opsworks:DescribeInstances'
                  - 'opsworks:DescribeStacks'
                  - 'opsworks:UpdateApp'
                  - 'opsworks:UpdateStack'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuildBatches'
                  - 'codebuild:StartBuildBatch'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'states:DescribeExecution'
                  - 'states:DescribeStateMachine'
                  - 'states:StartExecution'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'appconfig:StartDeployment'
                  - 'appconfig:StopDeployment'
                  - 'appconfig:GetDeployment'
                Resource: '*'
                Effect: 'Allow'

  CodePipelineDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: CodePipelineDeployRoleInLinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - 'codecommit:CreateCommit'
                  - 'codecommit:CreateRepository'
                  - 'codecommit:DeleteRepository'
                  - 'codecommit:GetRepository'
                  - 'codecommit:ListRepositories'
                  - 'codecommit:TagResource'
                  - 'config:DescribeConfigurationRecorderStatus'
                  - 'config:DescribeConfigurationRecorders'
                  - 'ec2:DescribeAvailabilityZones'
                  - 'ec2:CreateTags'
                  - 'ec2:DeleteTags'
                  - 'ec2:DescribeTags'
                  - 'resource-groups:CreateGroup'
                  - 'resource-groups:DeleteGroup'
                  - 'resource-groups:Tag'
                  - 'resource-groups:Untag'
                  - 'ssm:AddTagsToResource'
                  - 'ssm:DeleteParameter'
                  - 'ssm:DeleteParameters'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:PutParameter'
                  - 'ssm:RemoveTagsFromResource'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 'kms:CreateAlias'
                  - 'kms:CreateGrant'
                  - 'kms:CreateKey'
                  - 'kms:Decrypt'
                  - 'kms:DeleteAlias'
                  - 'kms:DeleteCustomKeyStore'
                  - 'kms:DeleteImportedKeyMaterial'
                  - 'kms:DescribeKey'
                  - 'kms:EnableKey'
                  - 'kms:EnableKeyRotation'
                  - 'kms:GenerateDataKey'
                  - 'kms:ListAliases'
                  - 'kms:PutKeyPolicy'
                  - 'kms:ScheduleKeyDeletion'
                  - 'kms:TagResource'
                  - 'kms:UpdateAlias'
                  - 'kms:UpdateCustomKeyStore'
                  - 'kms:UpdateKeyDescription'
                Resource: '*'
                Effect: Allow
              -
                Action:
                  - sagemaker:ListDomains
                  - sagemaker:CreateDomain
                  - sagemaker:DescribeDomain
                  - sagemaker:DeleteDomain
                  - sagemaker:UpdateDomain
                  - sagemaker:ListUserProfiles
                  - sagemaker:CreateUserProfile
                  - sagemaker:UpdateUserProfile
                  - sagemaker:DeleteUserProfile
                  - sagemaker:DescribeUserProfile
                  - sagemaker:ListApps
                  - sagemaker:CreateApp
                  - sagemaker:DescribeApp
                  - sagemaker:DeleteApp
                  - sagemaker:UpdateApp
                  - sagemaker:CreateNotebookInstanceLifecycleConfig
                  - sagemaker:DeleteNotebookInstanceLifecycleConfig
                  - sagemaker:DescribeNotebookInstanceLifecycleConfig
                Resource:
                  - !Sub "arn:${AWS::Partition}:sagemaker:*:*:domain/*"
                  - !Sub "arn:${AWS::Partition}:sagemaker:*:*:user-profile/*"
                  - !Sub "arn:${AWS::Partition}:sagemaker:*:*:app/*"
                Effect: Allow
              - 
                Action:
                  - servicecatalog:AcceptPortfolioShare
                  - sagemaker:EnableSagemakerServicecatalogPortfolio
                  - sagemaker:DisableSagemakerServicecatalogPortfolio
                Resource: '*'
                Effect: Allow
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonVPCFullAccess'
        - 'arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'

  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/service-role/'
      Policies:
        - PolicyName: CodeBuildServiceRoleInLinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
                Effect: 'Allow'
              -
                Action:
                  - 's3:*Object'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${CodePipelineArtifactsBucket}*'
                  - !Sub 'arn:aws:s3:::${CodePipelineArtifactsBucket}*/*'
                  - !Sub 'arn:aws:s3:::${CfnArtifactS3BucketNamePrefix}*'
                  - !Sub 'arn:aws:s3:::${CfnArtifactS3BucketNamePrefix}*/*}'
                Effect: 'Allow'
              -
                Action:
                  - 'codecommit:GitPull'
                Resource: !Ref CodeCommitRepositoryArn
                Effect: 'Allow'
              -
                Action:
                  - 'codebuild:CreateReportGroup'
                  - 'codebuild:CreateReport'
                  - 'codebuild:UpdateReport'
                  - 'codebuild:BatchPutTestCases'
                  - 'codebuild:BatchPutCodeCoverages'
                Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'
                Effect: 'Allow'
              
  CloudWatchEventsTriggerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: '/service-role/'
      Policies:
        - PolicyName: CloudWatchEventsRoleInLinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - 'codepipeline:StartPipelineExecution'
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${VPCDeployPipeline}'
                Effect: 'Allow'

  CodeCommitTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-codecommit-trigger-${AWS::Region}'
      Description: !Sub 'Rule to trigger a CodePipeline when ${CodeCommitRepositoryArn} is updated with a commit'
      RoleArn: !GetAtt CloudWatchEventsTriggerRole.Arn
      EventPattern:
        source:
          - 'aws.codecommit'
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Ref CodeCommitRepositoryArn
        detail:
          event:
            - 'referenceCreated'
            - 'referenceUpdated'
          referenceType:
            - "branch"
          referenceName:
            - 'master'
            - 'main'
      State: 'ENABLED'
      Targets:
        -
          Arn: !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${VPCDeployPipeline}'
          Id: !Sub codecommit-${VPCDeployPipeline}-trigger
          RoleArn: !GetAtt CloudWatchEventsTriggerRole.Arn

  CodePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'codepipeline-${ProjectName}-${AWS::Region}'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE
      
  CfnTemplateBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${ProjectName}-cfn-build-${AWS::Region}'
      Description: !Sub 'Building CFN templates for ${ProjectName}'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts: 
        Type: CODEPIPELINE
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        EnvironmentVariables:
          - Name: 'S3_BUCKET_NAME'
            Value: !Sub '${CfnArtifactS3BucketNamePrefix}-${AWS::Region}'
          - Name: 'DEPLOYMENT_REGION'
            Value: !Ref AWS::Region
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      LogsConfig:
        CloudWatchLogs:
          Status: 'ENABLED'
      TimeoutInMinutes: 5

  ########################################################################
  # Pipelines
  ########################################################################
  VPCDeployPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${ProjectName}-${AWS::Region}-VPC'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactsBucket
      Stages:
        # Stage: Source -----------------------------------------------
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                PollForSourceChanges: 'false'
                RepositoryName: !Select ['5', !Split [":", !Ref CodeCommitRepositoryArn]]
                BranchName: 'master'
              OutputArtifacts:
                - Name: SourceArtifact

        # Stage: Build -----------------------------------------------
        - Name: Build
          Actions:
            - Name: BuildCFNTemplates
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Region: !Ref TestVPCRegion
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CfnTemplateBuildProject
#                EnvironmentVariables: ''
              RunOrder: 1

# !Sub '[{"name":"S3_BUCKET_NAME","value":"${CfnArtifactS3BucketNamePrefix}-${TestVPCRegion}","type":"PLAINTEXT"}]'

        # Stage: Deploy -----------------------------------------------
        - Name: Deploy
          Actions:
            # Action 1 
            - Name: BaseVPC
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              InputArtifacts:
                - Name: BuildArtifact
              OutputArtifacts:
                - Name: VPCOut
              Configuration:
                ActionMode: 'REPLACE_ON_FAILURE'
                StackName: 'base-vpc'
                Capabilities: 'CAPABILITY_NAMED_IAM'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
                TemplatePath: 'BuildArtifact::aws-vpc.template.yaml'
                OutputFileName: 'vpc-output.json'
                ParameterOverrides: !Sub '{
                    "AvailabilityZones": "${TestVPCRegion}a,${TestVPCRegion}b"
                   }'
                TemplateConfiguration: 'BuildArtifact::base-vpc.json'
              RunOrder: 1

            # Action 2 
            - Name: CoreIAMSharedRoles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              InputArtifacts:
                - Name: BuildArtifact
              OutputArtifacts:
                - Name: CoreIAMSharedRolesOutput
              Configuration:
                ActionMode: 'REPLACE_ON_FAILURE'
                StackName: 'core-iam-shared-roles'
                Capabilities: 'CAPABILITY_NAMED_IAM'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
                TemplatePath: 'BuildArtifact::core-iam-shared-roles.yaml'
                OutputFileName: 'core-iam-shared-roles-output.json'
                TemplateConfiguration: 'BuildArtifact::core-iam-shared-roles.json'
                ParameterOverrides: !Sub '{
                  "DSAdministratorRoleName": "${ProjectName}-${TestVPCRegion}-DataScienceAdministrator", 
                  "SageMakerDetectiveControlExecutionRoleName": "${ProjectName}-${TestVPCRegion}-DSSageMakerDetectiveControlRole", 
                  "SCLaunchRoleName": "${ProjectName}-${TestVPCRegion}-DSServiceCatalogLaunchRole"
                }'
              RunOrder: 1

            # Action 3
            - Name: EnvironmentIAMRoles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              InputArtifacts:
                - Name: BuildArtifact
              OutputArtifacts:
                - Name: IAMOut
              Configuration:
                ActionMode: 'REPLACE_ON_FAILURE'
                StackName: 'env-iam-roles'
                Capabilities: 'CAPABILITY_NAMED_IAM'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
                TemplatePath: 'BuildArtifact::env-iam.yaml'
                OutputFileName: 'iam-out.json'
                TemplateConfiguration: 'BuildArtifact::env-iam.json'
                ParameterOverrides: !Sub '{
                    "EnvName":"${ProjectName}"
                }'
              RunOrder: 1

            # Action 4
            - Name: EnvironmentIAMCrossAccountRoles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              InputArtifacts:
                - Name: BuildArtifact
              OutputArtifacts:
                - Name: EnvIAMCrossAccountDeploymentRoleOutput
              Configuration:
                ActionMode: 'REPLACE_ON_FAILURE'
                StackName: 'env-iam-cross-account-deployment-role'
                Capabilities: 'CAPABILITY_NAMED_IAM'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
                TemplatePath: 'BuildArtifact::env-iam-cross-account-deployment-role.yaml'
                OutputFileName: 'env-iam-cross-account-deployment-role-output.json'
                TemplateConfiguration: 'BuildArtifact::env-iam-cross-account-deployment-role.json'
                ParameterOverrides: !Sub '{
                    "EnvName":"${ProjectName}",
                    "PipelineExecutionRoleArn":"arn:aws:iam::${AWS::AccountId}:role/service-role/AmazonSageMakerServiceCatalogProductsUseRole" 
                   }'
              RunOrder: 1

            # Action 5
            - Name: CoreMain
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              InputArtifacts:
                - Name: BuildArtifact
                - Name: CoreIAMSharedRolesOutput
              OutputArtifacts:
                - Name: CoreMainOutput
              Configuration:
                ActionMode: 'REPLACE_ON_FAILURE'
                StackName: !Sub '${ProjectName}-core'
                Capabilities: 'CAPABILITY_NAMED_IAM'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
                TemplatePath: 'BuildArtifact::core-main.yaml-packaged'
                OutputFileName: 'core-main-output.json'
                TemplateConfiguration: 'BuildArtifact::core-main.json'
                ParameterOverrides: !Sub '{
                  "StackSetName":"${ProjectName}-core",
                  "CreateIAMRoles":"NO",
                  "DSAdministratorRoleArn":{ "Fn::GetParam":["CoreIAMSharedRolesOutput", "core-iam-shared-roles-output.json", "DSAdministratorRoleArn"]},
                  "SecurityControlExecutionRoleArn":{ "Fn::GetParam":["CoreIAMSharedRolesOutput", "core-iam-shared-roles-output.json", "SageMakerDetectiveControlExecutionRoleArn"]},
                  "SCLaunchRoleArn":{ "Fn::GetParam":["CoreIAMSharedRolesOutput", "core-iam-shared-roles-output.json", "SCLaunchRoleArn"]}
                }'
              RunOrder: 2

            # Action 6
            - Name: EnvironmentMain
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              InputArtifacts:
                - Name: BuildArtifact
                - Name: VPCOut
                - Name: IAMOut
              OutputArtifacts:
                - Name: EnvMainOutput
              Configuration:
                ActionMode: 'REPLACE_ON_FAILURE'
                StackName: !Sub '${ProjectName}-env'
                Capabilities: 'CAPABILITY_NAMED_IAM'
                RoleArn: !Ref CodePipelineDeployRoleForDSEnvironmentArn
                TemplatePath: 'BuildArtifact::env-main.yaml-packaged'
                OutputFileName: 'env-main-output.json'
                TemplateConfiguration: 'BuildArtifact::env-main.json'
                ParameterOverrides: !Sub '{
                  "EnvName":"${ProjectName}",
                  "DSTeamAdministratorRoleArn":{ "Fn::GetParam":["IAMOut", "iam-out.json", "DSTeamAdministratorRoleArn"]},
                  "DataScientistRoleArn":{ "Fn::GetParam":["IAMOut", "iam-out.json", "DataScientistRoleArn"]},
                  "SageMakerExecutionRoleArn":{ "Fn::GetParam":["IAMOut", "iam-out.json", "SageMakerExecutionRoleArn"]},
                  "SetupLambdaExecutionRoleArn":{ "Fn::GetParam":["IAMOut", "iam-out.json", "SetupLambdaExecutionRoleArn"]},
                  "SCProjectLaunchRoleArn":{ "Fn::GetParam":["IAMOut", "iam-out.json", "SCProjectLaunchRoleArn"]},
                  "AvailabilityZones":"${TestVPCRegion}a,${TestVPCRegion}b",
                  "ExistingVPCId":{ "Fn::GetParam":["VPCOut", "vpc-output.json", "VPCID"]},
                  "ExistingS3VPCEndpointId":{ "Fn::GetParam":["VPCOut", "vpc-output.json", "S3VPCEndpoint"]}
                }'
              RunOrder: 3

            # Action 7
            - Name: ApproveDeployment
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: '1'
                Provider: Manual
              Configuration:
                CustomData: !Sub '${ProjectName} pipeline (existing VPC and pre-provisioned IAM use case) ready for review in ${AWS::AccountId}:${TestVPCRegion}'
                ExternalEntityLink: !Sub 'https://${TestVPCRegion}.console.aws.amazon.com/cloudformation/home?region=${TestVPCRegion}'
                NotificationArn: !Ref NotificationArn
              RunOrder: 4

            # Action 8
            - Name: DeleteEnvironment
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              Configuration:
                ActionMode: 'DELETE_ONLY'
                StackName: !Sub '${ProjectName}-env'
                RoleArn: !Ref CodePipelineDeployRoleForDSEnvironmentArn
              RunOrder: 5

            # Action 9
            - Name: DeleteCore
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              Configuration:
                ActionMode: 'DELETE_ONLY'
                StackName: !Sub '${ProjectName}-core'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
              RunOrder: 6

            # Action 10
            - Name: DeleteEFS
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Region: !Ref TestVPCRegion
              InputArtifacts:
                - Name: EnvMainOutput
              Configuration:
                FunctionName: !Ref CleanUpEFSLambda
                UserParameters: 'delete_efs'
              RunOrder: 6

            # Action 11
            - Name: DeleteEnvironmentIAMCrossAccountRoles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              Configuration:
                ActionMode: 'DELETE_ONLY'
                StackName: 'env-iam-cross-account-deployment-role'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
              RunOrder: 7

            # Action 12
            - Name: DeleteEnvironmentIAMRoles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              Configuration:
                ActionMode: 'DELETE_ONLY'
                StackName: 'env-iam-roles'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
              RunOrder: 7

            # Action 13
            - Name: DeleteCoreIAMSharedRoles
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              Configuration:
                ActionMode: 'DELETE_ONLY'
                StackName: 'core-iam-shared-roles'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
              RunOrder: 7
  
            # Action 14
            - Name: DeleteBaseVPC
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Region: !Ref TestVPCRegion
              Configuration:
                ActionMode: 'DELETE_ONLY'
                StackName: 'base-vpc'
                RoleArn: !GetAtt CodePipelineDeployRole.Arn
              RunOrder: 7

  VPCDeployPipelineNotificationRule:
    Type: AWS::CodeStarNotifications::NotificationRule
    Properties:
      DetailType: 'FULL'
      EventTypeIds:
        - 'codepipeline-pipeline-pipeline-execution-failed'
        - 'codepipeline-pipeline-pipeline-execution-succeeded'
        - 'codepipeline-pipeline-manual-approval-needed'
      Name: !Sub '${VPCDeployPipeline}-notifications'
      Resource: !Sub 'arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:${VPCDeployPipeline}'
      Status: 'ENABLED'
      Targets:
          - 
            TargetAddress: !Ref NotificationArn
            TargetType: 'SNS'





  